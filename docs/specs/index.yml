swagger: "2.0"
info:
  description: "oliveサロンのフロントエンドで必要なAPIです"
  version: "1.0.0"
  title: "oliveサロンフロントエンドAPI"
  termsOfService: "https://github.com/egg-system/olive-front"
  contact:
    email: "example@example.com"
  license:
    name: "エッグシステム"
    url: "https://eggsystem.co.jp/"
host: "reserve.olivebodycare.healthcare"
securityDefinitions:
  basicAuth:
    type: basic
paths:
  /api/shops/{id}:
    get:
      tags: ["shun API"]
      summary: "店舗情報API"
      description: "指定されたidの店舗情報を返します"
      parameters:
      - name: "id"
        in: "path"
        description: "店舗のID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
                example: "1"
              name:
                type: "string"
                example: "オリーブボディケア　たまプラーザ店"
              open_at:
                description: "営業開始時間"
                type: "string"
                format: "hh"
                example: "10"
              close_at:
                description: "営業終了時間"
                type: "string"
                format: "hh"
                example: "20"
              break_from:
                description: "休憩開始時間"
                type: "string"
                format: "hh"
                example: "14"
              break_to:
                description: "休憩終了時間"
                type: "string"
                format: "hh"
                example: "16"
        400:
          description: "失敗時のレスポンス"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "request bad error"
  /api/shops/{id}/menus:
    get:
      tags: ["shun API"]
      summary: "メニュー一覧API"
      description: "指定されたidの店舗で利用できるメニュー一覧を返します"
      parameters:
      - name: "id"
        in: "path"
        description: "店舗のID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                id:
                  type: "integer"
                  format: "int64"
                  example: "1"
                name:
                  type: "string"
                  example: "女性専門の治療院オリーヴボディケアたまプラーザ店"
                menus:
                  type: "array"
                  items:
                    type: "object"
                    properties:
                      id:
                        type: "integer"
                        format: "int64"
                        example: "1"
                      name:
                        type: "string"
                        example: "通常整体コース"
                      price:
                        description: "税抜き価格"
                        type: "integer"
                        format: "int64"
                        example: "6000"
                      minutes:
                        description: "施術時間"
                        type: "integer"
                        format: "int64"
                        example: "6000"
                      description:
                        type: "string"
                        nullable: "true"
                        example: "？？？？"
                      options:
                        type: "array"
                        items:
                          type: "object"
                          properties:
                            id:
                              type: "integer"
                              format: "int64"
                              example: "1"
                            name:
                              type: "string"
                              example: "耳つぼジュエリー"
                            price:
                              description: "税抜き価格"
                              type: "integer"
                              format: "int64"
                              example: "500"
                            max_number:
                              description: "最大個数。未使用ならnull。"
                              type: "integer"
                              format: "int64"
                              nullable: "true"
                              example: "10"
                            unit:
                              description: "個数単位。未使用ならnull。"
                              type: "string"
                              nullable: "true"
                              example: "粒"
        400:
          description: "失敗時のレスポンス"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "request bad error"
  /api/shops/{id}/dates:
    get:
      tags: ["shun API"]
      summary: "予約カレンダーAPI"
      description: "指定された店舗id、メニューidから予約カレンダーを表示するための情報を返します"
      parameters:
      - name: "id"
        in: "path"
        description: "店舗のID"
        required: true
        type: "integer"
        format: "int64"
      - name: "menu_id"
        required: true
        in: "query"
        type: "array"
        description: "メニューID一覧"
        items:
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                date:
                  type: "string"
                  format: "yyyymmdd"
                  example: "20190228"
                closed_date_flg:
                  type: "boolean"
                  example: "false"
                time_slots:
                  type: "array"
                  nullable: "true"
                  items:
                    type: "object"
                    properties:
                      id:
                        type: "integer"
                        format: "int64"
                        example: "1"
                      start_time:
                        type: "string"
                        format: "yyyymmddhh"
                        example: "2019022810"
                      remain:
                        type: "integer"
                        format: "int64"
                        nullable: "true"
                        example: "3"
                      closed_time_flg:
                        type: "boolean"
                        example: "false"
        400:
          description: "失敗時のレスポンス"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "request bad error"
  /api/customer/login/:
    get:
      tags: ["hikaru API"]
      summary: "ログインAPI"
      description: "ログイン情報を取得するAPI。<br>ユーザー認証にbasic認証を使う<br>(username→メールアドレス/password→ハッシュ化されたパスワード)"
      security:
        - basicAuth: []
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              customer_id:
                type: "integer"
                example: "123"
              first_name:
                type: "string"
                example: "山田"
              last_name:
                type: "string"
                example: "太郎"
              first_name_kana:
                type: "string"
                example: "ヤマダ"
              last_name_kana:
                type: "string"
                example: "タロウ"
              phone_number:
                type: "integer"
                format: "int32"
                example: 09012345678
        400:
          description: "パラメータエラー"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Bad Request"
        401:
          description: "認証エラー"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Unauthorized"
  /api/customer/create/:
    post:
      tags: ["hikaru API"]
      summary: "ユーザー作成API"
      description: "ユーザーを作成するAPI。成功の場合はサーバサイドでユーザー作成処理を行う。"
      parameters:
      - name: "mail"
        in: "query"
        description: "メールアドレス"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "ハッシュ化されたパスワード"
        required: true
        type: "string"
        format: "password"
      - name: "first_name"
        in: "query"
        description: "苗字"
        required: true
        type: "string"
      - name: "last_name"
        in: "query"
        description: "名前"
        required: true
        type: "string"
      - name: "first_name_kana"
        in: "query"
        description: "苗字カナ"
        required: true
        type: "string"
      - name: "last_name_kana"
        in: "query"
        description: "名前カナ"
        required: true
        type: "string"
      - name: "phone_number"
        in: "query"
        description: "電話番号"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              result:
                type: "string"
                example: "ok"
        400:
          description: "パラメータエラー"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Bad Request"
  /api/customer/password/reset/:
    get:
      tags: ["hikaru API"]
      summary: "パスワードリセットAPI"
      description: "ユーザーのパスワードをリセットするAPI。成功した場合はサーバサイドでパスワードリセット用のトークン(有効期限30分)を発行しメールでユーザーに通知する。"
      parameters:
      - name: "mail"
        in: "query"
        description: "メールアドレス"
        required: true
        type: "string"
      - name: "phone_number"
        in: "query"
        description: "電話番号"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              result:
                type: "string"
                example: "ok"
        400:
          description: "パラメータエラー"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Bad Request"
  /api/customer/password/update/:
    patch:
      tags: ["hikaru API"]
      summary: "パスワード更新API"
      description: "パスワードを更新するAPI。サーバイドでトークンのチェックを行う。パスワード更新にはトークンを使うためプロフィール更新とはAPIを分ける"
      parameters:
      - name: "token"
        in: "query"
        description: "トークン"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "ハッシュ化された新パスワード"
        required: true
        type: "string"
        format: "password"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              result:
                type: "string"
                example: "ok"
        400:
          description: "パラメータエラー"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Bad Request"
  /api/customer/profile/update/:
    patch:
      tags: ["hikaru API"]
      summary: "プロフィール更新API"
      description: "プロフィールを更新するAPI。パスワード更新にはトークンを使うためパスワード更新とはAPIを分ける。<br>ユーザー認証にbasic認証を使う<br>(username→メールアドレス/password→ハッシュ化されたパスワード)"
      security:
        - basicAuth: []
      parameters:
      - name: "first_name"
        in: "query"
        description: "苗字"
        required: true
        type: "string"
      - name: "last_name"
        in: "query"
        description: "名前"
        required: true
        type: "string"
      - name: "first_name_kana"
        in: "query"
        description: "苗字カナ"
        required: true
        type: "string"
      - name: "last_name_kana"
        in: "query"
        description: "名前カナ"
        required: true
        type: "string"
      - name: "phone_number"
        in: "query"
        description: "電話番号"
        required: true
        type: "integer"
        format: "int32"

      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              result:
                type: "string"
                example: "ok"
        400:
          description: "パラメータエラー"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Bad Request"
        401:
          description: "認証エラー"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Unauthorized"
  /api/reserve/commit/:
    post:
      tags: ["hikaru API"]
      summary: "予約確定API"
      description: "予約を確定するAPI。<br>ユーザー認証にbasic認証を使う<br>(username→メールアドレス/password→ハッシュ化されたパスワード)"
      security:
        - basicAuth: []
      parameters:
      - name: "menu_id"
        in: "query"
        description: "予約メニューID"
        required: true
        type: "integer"
        format: "int32"
      - name: "is_first"
        in: "query"
        description: "初回利用"
        required: true
        type: "boolean"
      - name: "customer_id"
        in: "query"
        description: "顧客ID<br>ログイン済みの場合はIDをつける。未ログインの場合は空にする"
        required: false
        type: "integer"
        format: "int32"
      - name: "is_use_coupon"
        in: "query"
        description: "クーポン利用"
        required: false
        type: "boolean"
      - name: "pregnancy_term"
        in: "query"
        description: "妊娠有無<br>0:妊娠なし<br>1:4ヵ月未満<br>2:5ヵ月<br>3:6ヵ月<br>4:7ヵ月<br>5:8ヵ月<br>6:9ヵ月<br>7:10ヵ月"
        required: false
        type: "integer"
        enum: [0,1,2,3,4,5,6,7]
      - name: "children"
        in: "query"
        description: "お子様連れ<br>0:なし<br>1:1人<br>2:2人<br>3:3人<br>4:4人<br>5:5人以上"
        required: false
        type: "integer"
        enum: [0,1,2,3,4,5]
      - name: "is_get_message"
        in: "query"
        description: "サロンからのメッセージを受け取るかどうか"
        required: false
        type: "boolean"
      - name: "request"
        in: "query"
        description: "サロンへのご要望・ご相談"
        required: false
        type: "string"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              result:
                type: "string"
                example: "ok"
        400:
          description: "パラメータエラー"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Bad Request"
        401:
          description: "認証エラー"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Unauthorized"
  /api/reserve/cancel/:
    get:
      tags: ["hikaru API"]
      summary: "予約キャンセルAPI"
      description: "予約をキャンセルするAPI。<br>ユーザー認証にbasic認証を使う<br>(username→メールアドレス/password→ハッシュ化されたパスワード)"
      security:
        - basicAuth: []
      parameters:
      - name: "menu_id"
        in: "query"
        description: "予約メニューID"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              result:
                type: "string"
                example: "ok"
        400:
          description: "パラメータエラー"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Bad Request"
        401:
          description: "認証エラー"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Unauthorized"
  /api/reserve/list/:
    get:
      tags: ["hikaru API"]
      summary: "予約一覧取得API"
      description: "予約情報を一覧で取得するAPI。<br>ユーザー認証にbasic認証を使う<br>(username→メールアドレス/password→ハッシュ化されたパスワード)"
      security:
        - basicAuth: []
      parameters:
      - name: "start"
        in: "query"
        description: "取得開始位置"
        required: false
        type: "integer"
      - name: "result"
        in: "query"
        description: "取得件数"
        required: false
        type: "integer"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              result:
                type: "array"
                items:
                  example:
                    - id: 123
                      date: 20190310
                      menu: "通常整体コース 60分"
                      price: 6000
                      caccel_flag: true
                    - id: 456
                      date: 20190311
                      menu: "通常整体コース 120分"
                      price: 8000
                      caccel_flag: false
                    - id: 789
                      date: 20190312
                      menu: "通常整体コース 60分"
                      price: 6000
                      caccel_flag: false
        400:
          description: "パラメータエラー"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Bad Request"
        401:
          description: "認証エラー"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Unauthorized"
  /api/coupons/:
    get:
      tags: ["hikaru API"]
      summary: "回数券残数取得API"
      description: "回数券の残数をで取得するAPI。施術回数券とインデプス回数券の2種類を返す。<br>ユーザー認証にbasic認証を使う<br>(username→メールアドレス/password→ハッシュ化されたパスワード)"
      security:
        - basicAuth: []
      parameters:
      - name: "customer_id"
        in: "query"
        description: "カスタマーID"
        required: true
        type: "integer"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              operation:
                type: "array"
                items:
                  type: "object"
                  properties:
                    count:
                      type: "integer"
                      format: "int64"
                      example: "5"
                    expire:
                      type: "integer"
                      format: "int64"
                      example: 20190331
              indeps:
                type: "array"
                items:
                  type: "object"
                  properties:
                    count:
                      type: "integer"
                      format: "int64"
                      example: "3"
                    expire:
                      type: "integer"
                      format: "int64"
                      example: 20190430
        400:
          description: "パラメータエラー"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Bad Request"
        401:
          description: "認証エラー"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Unauthorized"

  /api/reserve/commit/_tmp:
    post:
      tags: ["要レビュー API"]
      summary: "予約確定API【改】"
      description: "予約登録を行うAPI。<br>1.新規ユーザーによる予約+新規ユーザー登録<br>2.ユーザー登録を行わず予約だけ行う<br>3.ログイン済みユーザーによる予約<br>の3パターンがある。<br>ログイン済みユーザーによる予約場合は、ユーザー情報の登録も行う。<br>ログイン済みかどうかの判別は以下のbasic認証情報が付与されているかどうかで判別する。<br>(username→メールアドレス/password→ハッシュ化されたパスワード)"
      consumes:
        - application/json
      parameters:
        - in: body
          name: postData
          schema:
            type: object
            properties:
              first_visit_flg:
                type: boolean
                description: "初回利用"
                example: true
              children_number:
                type: integer
                example: 3
                description: "お子様連れ
                              0:なし
                              1:1人
                              2:2人
                              3:3人
                              4:4人
                              5:5人以上"

              pregnant_status_id:
                type: integer
                example: 3
                description: "妊娠ステータスID
                            1：妊娠なし
                            2：4ヶ月未満
                            3：5ヶ月
                            4：6ヶ月
                            5：7ヶ月
                            6：8ヶ月"
              reservation_comment:
                type: string
                example: ""
                description: "サロンへのご要望・ご相談"
              reservations:
                description: "予約する予約枠の一覧。<br>２時間続けて予約する場合は、配列に要素が複数格納される。"
                type: array
                items:
                  type: object
                  properties:
                    start_time:
                      type: "string"
                      format: "yyyymmddhh"
                      description: "予約した施術の開始時刻"
                      example: "2019022810"
                    menus:
                      type: array
                      description: "予約したメニュー一覧。基本メニューとオプション"
                      items:
                        type: object
                        properties:
                          id:
                            format: integer
                            description: "メニューID"
                            example: 10
                          number:
                            format: integer
                            description: "個数。耳つぼジュエリー以外は1"
                            example: 1
                    coupon_ids:
                      type: array
                      description: "使用するクーポンIDの一覧。基本メニュー回数券、インデプス回数券など複数格納するパターンもあるので配列で格納する。"
                      items:
                        type: integer
                        description: クーポンID。
                        example: 1
              user:
                type: object
                properties:
                  first_name:
                    type: string
                    description: "姓"
                    example: "山田"
                  last_name:
                    type: string
                    description: "名"
                    example: "太郎"
                  first_name_kana:
                    type: string
                    description: "姓（カナ）"
                    example: "ヤマダ"
                  last_name_kana:
                    type: string
                    description: "名（カナ）"
                    example: "タロウ"
                  phone_number:
                    type: string
                    description: "電話番号"
                    example: "09011112222"
                  member_flg:
                    type: boolean
                    description: "会員登録するかどうか"
                    example: true
                  password:
                    type: string
                    description: "パスワード"
                    example: "xETd892"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              result:
                type: "string"
                example: "ok"
        400:
          description: "パラメータエラー"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Bad Request"

