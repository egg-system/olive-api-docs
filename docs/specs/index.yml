swagger: "2.0"
info:
  description: "oliveサロンのフロントエンドで必要なAPIです"
  version: "1.0.0"
  title: "oliveサロンフロントエンドAPI"
  termsOfService: "https://github.com/egg-system/olive-front"
  contact:
    email: "example@example.com"
  license:
    name: "エッグシステム"
    url: "https://eggsystem.co.jp/"
host: "reserve.olivebodycare.healthcare"
paths:
  /api/shops/{id}:
    get:
      tags: ["shun API"]
      summary: "店舗情報API"
      description: "指定されたidの店舗情報を返します"
      parameters:
      - name: "id"
        in: "path"
        description: "店舗のID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
                example: "1"
              name:
                type: "string"
                example: "オリーブボディケア　たまプラーザ店"
              open_at:
                description: "営業開始時間"
                type: "string"
                format: "hh"
                example: "10"
              close_at:
                description: "営業終了時間"
                type: "string"
                format: "hh"
                example: "20"
              break_from:
                description: "休憩開始時間"
                type: "string"
                format: "hh"
                example: "14"
              break_to:
                description: "休憩終了時間"
                type: "string"
                format: "hh"
                example: "16"
        400:
          description: "失敗時のレスポンス"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "request bad error"
  /api/shops/{id}/menus:
    get:
      tags: ["shun API"]
      summary: "メニュー一覧API"
      description: "指定されたidの店舗で利用できるメニュー一覧を返します"
      parameters:
      - name: "id"
        in: "path"
        description: "店舗のID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              sub_shops:
                type: "array"
                items:
                  type: "object"
                  properties:
                    id:
                      type: "integer"
                      format: "int64"
                      example: "1"
                    name:
                      type: "string"
                      example: "女性専門の治療院オリーヴボディケアたまプラーザ店"
                    menus:
                      type: "array"
                      items:
                        type: "object"
                        properties:
                          id:
                            type: "integer"
                            format: "int64"
                            example: "1"
                          name:
                            type: "string"
                            example: "通常整体コース"
                          price:
                            description: "税抜き価格"
                            type: "integer"
                            format: "int64"
                            example: "6000"
                          minutes:
                            description: "施術時間"
                            type: "integer"
                            format: "int64"
                            example: "6000"
                          description:
                            type: "string"
                            nullable: "true"
                            example: "？？？？"
                          options:
                            type: "array"
                            items:
                              type: "object"
                              properties:
                                id:
                                  type: "integer"
                                  format: "int64"
                                  example: "1"
                                name:
                                  type: "string"
                                  example: "耳つぼジュエリー"
                                price:
                                  description: "税抜き価格"
                                  type: "integer"
                                  format: "int64"
                                  example: "500"
                                max_number:
                                  description: "最大個数。未使用ならnull。"
                                  type: "integer"
                                  format: "int64"
                                  nullable: "true"
                                  example: "10"
                                unit:
                                  description: "個数単位。未使用ならnull。"
                                  type: "string"
                                  nullable: "true"
                                  example: "粒"
        400:
          description: "失敗時のレスポンス"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "request bad error"
  /api/shops/{id}/menus/{menuId}/dates:
    get:
      tags: ["shun API"]
      summary: "予約カレンダーAPI"
      description: "指定された店舗id、メニューidから予約カレンダーを表示するための情報を返します"
      parameters:
      - name: "id"
        in: "path"
        description: "店舗のID"
        required: true
        type: "integer"
        format: "int64"
      - name: "menuId"
        in: "path"
        description: "メニューのID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              date_slots:
                type: "array"
                items:
                  type: "object"
                  properties:
                    date:
                      type: "string"
                      format: "yyyymmdd"
                      example: "20190228"
                    closed_date_flg:
                      type: "boolean"
                      example: "false"
                    time_slots:
                      type: "array"
                      nullable: "true"
                      items:
                        type: "object"
                        properties:
                          id:
                            type: "integer"
                            format: "int64"
                            example: "1"
                          start_time:
                            type: "string"
                            format: "yyyymmddhh"
                            example: "2019022810"
                          remain:
                            type: "integer"
                            format: "int64"
                            nullable: "true"
                            example: "3"
                          closed_time_flg:
                            type: "boolean"
                            example: "false"
        400:
          description: "失敗時のレスポンス"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "request bad error"
  /api/login/:
    post:
      tags: ["hikaru API"]
      summary: "ログインAPI"
      description: "ログイン情報を取得するAPI"
      parameters:
      - name: "mail"
        in: "query"
        description: "メールアドレス"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "ハッシュ化されたパスワード"
        required: true
        type: "string"
        format: "password"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              first_name:
                type: "string"
                example: "山田"
              last_name:
                type: "string"
                example: "太郎"
              first_name_kana:
                type: "string"
                example: "ヤマダ"
              last_name_kana:
                type: "string"
                example: "タロウ"
              phone_number:
                type: "integer"
                format: "int32"
                example: "09012345678"
        400:
          description: "パラメータエラー"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Bad Request"
        404:
          description: "ユーザー Not Found"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "User Not Found"
  /api/reserve/commit/:
    get:
      tags: ["hikaru API"]
      summary: "予約確定API"
      description: "予約を確定するAPI"
      parameters:
      - name: "menu_id"
        in: "query"
        description: "予約メニューID"
        required: true
        type: "integer"
        format: "int32"
      - name: "is_first"
        in: "query"
        description: "初回利用"
        required: true
        type: "boolean"
      - name: "is_use_coupon"
        in: "query"
        description: "クーポン利用"
        required: false
        type: "boolean"
      - name: "pregnancy_term"
        in: "query"
        description: "妊娠有無<br>0:妊娠なし<br>1:4ヵ月未満<br>2:5ヵ月<br>3:6ヵ月<br>4:7ヵ月<br>5:8ヵ月<br>6:9ヵ月<br>7:10ヵ月"
        required: false
        type: "integer"
        enum: [0,1,2,3,4,5,6,7]
      - name: "children"
        in: "query"
        description: "お子様連れ<br>0:なし<br>1:1人<br>2:2人<br>3:3人<br>4:4人<br>5:5人以上"
        required: false
        type: "integer"
        enum: [0,1,2,3,4,5]
      - name: "is_get_message"
        in: "query"
        description: "サロンからのメッセージを受け取るかどうか"
        required: false
        type: "boolean"
      - name: "request"
        in: "query"
        description: "サロンへのご要望・ご相談"
        required: false
        type: "string"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
                example: "200"
        400:
          description: "パラメータエラー"
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
                example: "400"
              error:
                type: "string"
                example: "Bad Request"
