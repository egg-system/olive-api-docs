swagger: "2.0"
info:
  description: "oliveサロンのフロントエンドで必要なAPIです"
  version: "1.0.0"
  title: "oliveサロンフロントエンドAPI"
  termsOfService: "https://github.com/egg-system/olive-front"
  contact:
    email: "example@example.com"
  license:
    name: "エッグシステム"
    url: "https://eggsystem.co.jp/"
host: "reserve.olivebodycare.healthcare"
paths:
  /pet/{petId}:
    get:
      tags: ["shun API"]
      summary: "ペット情報API"
      description: "指定されたpetIdの情報を返します"
      parameters:
      - name: "petId"
        in: "path"
        description: "取得したいペットのID"
        required: true
        type: "integer"
        format: "int64"
      - name: "petId2"
        in: "query"
        description: "取得したいペットのID2"
        required: false
        type: "integer"
        format: "int"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
              name:
                type: "string"
                example: "doggie"
              product:
                properties:
                  id: 
                    #データ型
                    type: "integer"
                    #ダミー値
                    example: "1"
                  name:
                    type: "string"
                    example: "hogehoge"
        400:
          description: "失敗時のレスポンス"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "request bad error"
  /login/:
    post:
      tags: ["hikaru API"]
      summary: "ログインAPI"
      description: "ログイン情報を取得するAPI"
      parameters:
      - name: "mail"
        in: "query"
        description: "メールアドレス"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "ハッシュ化されたパスワード"
        required: true
        type: "string"
        format: "password"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              firstName:
                type: "string"
                example: "山田"
              lastName:
                type: "string"
                example: "太郎"
              firstNameKana:
                type: "string"
                example: "ヤマダ"
              lastNameKana:
                type: "string"
                example: "タロウ"
              phoneNumber:
                type: "integer"
                format: "int32"
                example: "09012345678"
        400:
          description: "パラメータエラー"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Bad Request"
        404:
          description: "ユーザー Not Found"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "User Not Found"
